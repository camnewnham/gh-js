// Generated for: GH_IO 8.9.24194.18121
// Generated by: Microsoft.JavaScript.NodeApi.Generator 0.7.0.0
/* eslint-disable */

type DateTime = Date | { kind?: 'utc' | 'local' | 'unspecified' }

declare module 'node-api-dotnet' {

	export namespace GH_IO {
		/**
		 * Every object which needs to (de)serialize itself using GH_IO methodology must
		 * implement this interface.
		 */
		export interface GH_ISerializable {
			/** This method is called whenever the instance is required to serialize itself. */
			Write(writer: GH_IO.Serialization.GH_IWriter): boolean;

			/** This method is called whenever the instance is required to deserialize itself. */
			Read(reader: GH_IO.Serialization.GH_IReader): boolean;
		}
	}

	export namespace GH_IO {
		/**
		 * Represents a product version number that encodes major, minor, time and build branch
		 * information. as major.minor.yyddd.hhmmb where: yy = year of build - 2000 ddd = year
		 * day of build (1-366) hh = hour of build mm = minute of build b = branch of build
		 */
		export class VersionNumber {
			constructor(
				major: number,
				minor: number,
				time: DateTime,
				buildBranch: GH_IO.VersionNumber.Branch,
			);

			/**
			 * Initializes a new instance of the VersionNumber structure to the version specified by
			 * the version quartet values.
			 */
			constructor(
				majorVersionNumber: number,
				minorVersionNumber: number,
				versionQuartetYyddd: number,
				versionQuartetHhmmb: number,
			);

			/** Construct VersionNumber based on existing System.Version class. */
			constructor(version: unknown);

			/** The Unset VersionNumber. VersionNumber.Unset.IsValid is false. */
			static readonly Unset: GH_IO.VersionNumber;

			/** The smallest possible valid VersionNumber. */
			static readonly MinValid: GH_IO.VersionNumber;

			/** The largest possible valid VersionNumber. */
			static readonly MaxValid: GH_IO.VersionNumber;

			/** True when all information in the VersionNumber has valid values. */
			readonly IsValid: boolean;

			/** The smallest possible valid value of VersionNumber.MajorVersionNumber. */
			static readonly MinMajorVersionNumber: number;

			/** The largest possible valid value of VersionNumber.MajorVersionNumber. */
			static readonly MaxMajorVersionNumber: number;

			/** The value of an Unset VersionNumber.Time. */
			static readonly UnsetTime: DateTime;

			/** The smallest possible valid value of VersionNumber.Time.  This field is read-only. */
			static readonly MinValidTime: DateTime;

			/** The largest possible valid value of VersionNumber.Time.  This field is read-only. */
			static readonly MaxValidTime: DateTime;

			/** The value of an Unset VersionNumber.BuildBranch. */
			static readonly UnsetBuildBranch: GH_IO.VersionNumber.Branch;

			/**
			 * Represents the smallest possible valid value of VersionNumber.BuildBranch.  This field
			 * is read-only.
			 */
			static readonly MinValidBuildBranch: GH_IO.VersionNumber.Branch;

			/**
			 * Represents the largest possible valid value of VersionNumber.BuildBranch.  This field
			 * is read-only.
			 */
			static readonly MaxValidBuildBranch: GH_IO.VersionNumber.Branch;

			/** Gets the major version number component of this instance. */
			readonly Major: number;

			/** Gets the minor version number component of this instance. */
			readonly Minor: number;

			/** The smallest possible valid value of VersionNumber.MinorVersionNumber. */
			static readonly MinMinorVersionNumber: number;

			/** The largest possible valid value of VersionNumber.MinorVersionNumber. */
			static readonly MaxMinorVersionNumber: number;

			/** Gets the version time component of this instance. */
			readonly Time: DateTime;

			/** Gets the build branch component of this instance. */
			readonly BuildBranch: GH_IO.VersionNumber.Branch;

			/**
			 * Compares the value of this instance to a specified VersionNumber value and returns an
			 * integer that indicates whether this instance is earlier than, the same as, or later
			 * than the specified VersionNumber value.
			 */
			CompareTo(value: GH_IO.VersionNumber): number;

			/**
			 * Compares the value of this instance to a specified VersionNumber value and returns an
			 * integer that indicates whether this instance is earlier than, the same as, or later
			 * than the specified VersionNumber value.
			 */
			CompareTo(value: unknown): number;

			/**
			 * Converts the value of the current VersionNumber object to its equivalent string
			 * representation major.minor.yyddd.hhmmb. (Overrides ValueType.ToString().)
			 */
			ToString(): string;

			/** Convert this VersionNumber class to System.Version() */
			ToVersion(): unknown;

			static TryParse(s: string): GH_IO.VersionNumber | undefined;

			static TryParse(v: unknown): GH_IO.VersionNumber | undefined;
		}
	}

	export namespace GH_IO.VersionNumber {
		export enum Branch {
			Unset = 0,

			Developer = 1,

			Trunk = 2,

			ReleaseCandidate = 3,

			Release = 4,
		}
	}

	export namespace GH_IO.Types {
		/** Basic version type. Contains Major, Minor and Revision fields. */
		export class GH_Version {
			/** Default constructor. Create a new version from specified fields. */
			constructor(
				v_major: number,
				v_minor: number,
				v_revision: number,
			);

			/** Copy constructor. Duplicate an existing version structure. */
			constructor(other: GH_IO.Types.GH_Version);

			/**
			 * Default formatter for Version data: M.m.RRRR  Revision section is padded with zeroes
			 * until it is at least 4 digits long.
			 */
			ToString(): string;

			/** Returns the hash code for this instance. */
			GetHashCode(): number;

			/** Performs value equality comparison. */
			Equals(obj: unknown): boolean;
		}
	}

	export namespace GH_IO.Types {
		/** Represents two double precision floating point values. */
		export class GH_Interval1D {
			/** Constructor. */
			constructor(
				na: number,
				nb: number,
			);

			/** Converts this structure to a human-readable string. */
			ToString(): string;
		}
	}

	export namespace GH_IO.Types {
		/** Represents two double precision domains. */
		export class GH_Interval2D {
			/** Constructor. */
			constructor(
				nu: GH_IO.Types.GH_Interval1D,
				nv: GH_IO.Types.GH_Interval1D,
			);

			/** Constructor. */
			constructor(
				nu0: number,
				nu1: number,
				nv0: number,
				nv1: number,
			);

			/** Converts this structure to a human-readable string. */
			ToString(): string;
		}
	}

	export namespace GH_IO.Types {
		/** Represents a 2D point coordinate with double precision floating point components. */
		export class GH_Point2D {
			/** Constructor. */
			constructor(
				nx: number,
				ny: number,
			);

			/** Converts this structure to a human-readable string. */
			ToString(): string;
		}
	}

	export namespace GH_IO.Types {
		/** Represents a 3D point coordinate with double precision floating point components. */
		export class GH_Point3D {
			/** Constructor. */
			constructor(
				nx: number,
				ny: number,
				nz: number,
			);

			/** Converts this structure to a human-readable string. */
			ToString(): string;
		}
	}

	export namespace GH_IO.Types {
		/** Represents a 4D point coordinate with double precision floating point components. */
		export class GH_Point4D {
			/** Constructor. */
			constructor(
				nx: number,
				ny: number,
				nz: number,
				nw: number,
			);

			/** Converts this structure to a human-readable string. */
			ToString(): string;
		}
	}

	export namespace GH_IO.Types {
		/** Represents a 3D line segment, denoted by start and endpoints. */
		export class GH_Line {
			/** Constructor. */
			constructor(
				nA: GH_IO.Types.GH_Point3D,
				nB: GH_IO.Types.GH_Point3D,
			);

			/** Constructor. */
			constructor(
				Ax: number,
				Ay: number,
				Az: number,
				Bx: number,
				By: number,
				Bz: number,
			);

			/** Converts this structure to a human-readable string. */
			ToString(): string;
		}
	}

	export namespace GH_IO.Types {
		/** Represents a 3D bounding box, denoted by two points. */
		export class GH_BoundingBox {
			/** Constructor. */
			constructor(
				nMin: GH_IO.Types.GH_Point3D,
				nMax: GH_IO.Types.GH_Point3D,
			);

			/** Constructor. */
			constructor(
				Minx: number,
				Miny: number,
				Minz: number,
				Maxx: number,
				Maxy: number,
				Maxz: number,
			);

			/** Converts this structure to a human-readable string. */
			ToString(): string;
		}
	}

	export namespace GH_IO.Types {
		/** Represents a 3D plane system, defined by origin point and {X,Y} axis directions. */
		export class GH_Plane {
			/** Constructor. */
			constructor(
				nOrigin: GH_IO.Types.GH_Point3D,
				nXAxis: GH_IO.Types.GH_Point3D,
				nYAxis: GH_IO.Types.GH_Point3D,
			);

			/** Constructor. */
			constructor(
				Ox: number,
				Oy: number,
				Oz: number,
				Xx: number,
				Xy: number,
				Xz: number,
				Yx: number,
				Yy: number,
				Yz: number,
			);

			/** Converts this structure to a human-readable string. */
			ToString(): string;
		}
	}

	export namespace GH_IO.Types {
		/** Represents a single data item in a chunk. */
		export class GH_Item implements
			GH_IO.Serialization.GH_IBinarySupport,
			GH_IO.Serialization.GH_IXmlSupport {
			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: boolean,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: boolean,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: number,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: number,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: number,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: number,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: number,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: number,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: number,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: number,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: number,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: number,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: DateTime,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: DateTime,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: string,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: string,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: string,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: string,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: number[],
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: number[],
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: number[],
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: number[],
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: unknown,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: GH_IO.Types.GH_Point2D,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: GH_IO.Types.GH_Point2D,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: GH_IO.Types.GH_Point3D,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: GH_IO.Types.GH_Point3D,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: GH_IO.Types.GH_Point4D,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: GH_IO.Types.GH_Point4D,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: GH_IO.Types.GH_Interval1D,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: GH_IO.Types.GH_Interval1D,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: GH_IO.Types.GH_Interval2D,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: GH_IO.Types.GH_Interval2D,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: GH_IO.Types.GH_Line,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: GH_IO.Types.GH_Line,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: GH_IO.Types.GH_BoundingBox,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: GH_IO.Types.GH_BoundingBox,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: GH_IO.Types.GH_Plane,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: GH_IO.Types.GH_Plane,
			);

			/** Construct a new instance of GH_Item with the specified name and value. */
			constructor(
				item_name: string,
				item_data: GH_IO.Types.GH_Version,
			);

			/** Construct a new instance of GH_Item with the specified name, index and value. */
			constructor(
				item_name: string,
				item_index: number,
				item_data: GH_IO.Types.GH_Version,
			);

			/**
			 * Gets the type set validity of this item.  The item is considered to have a type if
			 * type != GH_Types.unset
			 */
			readonly HasType: boolean;

			/**
			 * Gets the name validity of this item.  The item is considered to have an invalid name
			 * if string.IsNullOrEmpty(name)
			 */
			readonly HasName: boolean;

			/**
			 * Gets the index existence implication. The item is considered to have an index
			 * qualifier  if the index value is larger than or equal to zero.
			 */
			readonly HasIndex: boolean;

			/**
			 * Gets the type of this item.  Type flags are set during construction and cannot be
			 * altered.
			 */
			readonly Type: GH_IO.Types.GH_Types;

			/**
			 * Gets or sets the name of this item.  Typically, names are set at construction and do
			 * not change.  If you change names after construction, you could corrupt an archive.
			 */
			Name: string;

			/**
			 * Gets or sets the index of an item.  Typically, indices are set at construction and do
			 * not change.  If you change indices after construction, you could corrupt an archive.
			 */
			Index: number;

			/** Readonly property used during Debugging. */
			readonly DebuggerDisplay: string;

			/** Retrieves the internal data of this item.  No type casting is performed. */
			readonly InternalData: unknown;

			/**
			 * Returns the internal data of this item cast to a Boolean. If the data is not stored as
			 * a Boolean, a conversion exception might be thrown.
			 */
			readonly _bool: boolean;

			/**
			 * Returns the internal data of this item cast to a Byte. If the data is not stored as a
			 * Byte, a conversion exception might be thrown.
			 */
			readonly _byte: number;

			/**
			 * Returns the internal data of this item cast to an Int32. If the data is not stored as
			 * an Int32, a conversion exception might be thrown.
			 */
			readonly _int32: number;

			/**
			 * Returns the internal data of this item cast to an Int64. If the data is not stored as
			 * an Int64, a conversion exception might be thrown.
			 */
			readonly _int64: number;

			/**
			 * Returns the internal data of this item cast to a Single. If the data is not stored as
			 * a Single, a conversion exception might be thrown.
			 */
			readonly _single: number;

			/**
			 * Returns the internal data of this item cast to a Double. If the data is not stored as
			 * a Double, a conversion exception might be thrown.
			 */
			readonly _double: number;

			/**
			 * Returns the internal data of this item cast to a Decimal. If the data is not stored as
			 * a Decimal, a conversion exception might be thrown.
			 */
			readonly _decimal: unknown;

			/**
			 * Returns the internal data of this item cast to a DateTime. If the data is not stored
			 * as a DateTime, a conversion exception might be thrown.
			 */
			readonly _date: DateTime;

			/**
			 * Returns the internal data of this item cast to a Guid. If the data is not stored as a
			 * Guid, a conversion exception might be thrown.
			 */
			readonly _guid: string;

			/**
			 * Returns the internal data of this item cast to a String. If the data is not stored as
			 * a String, a conversion exception might be thrown.
			 */
			readonly _string: string;

			/**
			 * Returns the internal data of this item cast to a Byte array. If the data is not stored
			 * as a Byte array, a conversion exception might be thrown.
			 */
			readonly _bytearray: number[];

			/**
			 * Returns the internal data of this item cast to a Byte array. If the data is not stored
			 * as a Byte array, a conversion exception might be thrown.
			 */
			readonly _doublearray: number[];

			/**
			 * Returns the internal data of this item cast to a Point. If the data is not stored as a
			 * Point, a conversion exception might be thrown.
			 */
			readonly _drawing_point: unknown;

			/**
			 * Returns the internal data of this item cast to a PointF. If the data is not stored as
			 * a PointF, a conversion exception might be thrown.
			 */
			readonly _drawing_pointf: unknown;

			/**
			 * Returns the internal data of this item cast to a Size. If the data is not stored as a
			 * Size, a conversion exception might be thrown.
			 */
			readonly _drawing_size: unknown;

			/**
			 * Returns the internal data of this item cast to a SizeF. If the data is not stored as a
			 * SizeF, a conversion exception might be thrown.
			 */
			readonly _drawing_sizef: unknown;

			/**
			 * Returns the internal data of this item cast to a Rectangle. If the data is not stored
			 * as a Rectangle, a conversion exception might be thrown.
			 */
			readonly _drawing_rectangle: unknown;

			/**
			 * Returns the internal data of this item cast to a RectangleF. If the data is not stored
			 * as a RectangleF, a conversion exception might be thrown.
			 */
			readonly _drawing_rectanglef: unknown;

			/**
			 * Returns the internal data of this item cast to a Color. If the data is not stored as a
			 * Color, a conversion exception might be thrown.
			 */
			readonly _drawing_color: unknown;

			/**
			 * Returns the internal data of this item cast to a Bitmap. If the data is not stored as
			 * a Bitmap, a conversion exception might be thrown.
			 */
			readonly _drawing_bitmap: unknown;

			/**
			 * Returns the internal data of this item cast to a Point2D. If the data is not stored as
			 * a Point2D, a conversion exception might be thrown.
			 */
			readonly _point2d: GH_IO.Types.GH_Point2D;

			/**
			 * Returns the internal data of this item cast to a Point3D. If the data is not stored as
			 * a Point3D, a conversion exception might be thrown.
			 */
			readonly _point3d: GH_IO.Types.GH_Point3D;

			/**
			 * Returns the internal data of this item cast to a Point4D. If the data is not stored as
			 * a Point4D, a conversion exception might be thrown.
			 */
			readonly _point4d: GH_IO.Types.GH_Point4D;

			/**
			 * Returns the internal data of this item cast to an Interval1D. If the data is not
			 * stored as an Interval1D, a conversion exception might be thrown.
			 */
			readonly _interval1d: GH_IO.Types.GH_Interval1D;

			/**
			 * Returns the internal data of this item cast to an Interval2D. If the data is not
			 * stored as an Interval2D, a conversion exception might be thrown.
			 */
			readonly _interval2d: GH_IO.Types.GH_Interval2D;

			/**
			 * Returns the internal data of this item cast to a Line. If the data is not stored as a
			 * Line, a conversion exception might be thrown.
			 */
			readonly _line: GH_IO.Types.GH_Line;

			/**
			 * Returns the internal data of this item cast to a BoundingBox. If the data is not
			 * stored as a BoundingBox, a conversion exception might be thrown.
			 */
			readonly _boundingbox: GH_IO.Types.GH_BoundingBox;

			/**
			 * Returns the internal data of this item cast to a Plane. If the data is not stored as a
			 * Plane, a conversion exception might be thrown.
			 */
			readonly _plane: GH_IO.Types.GH_Plane;

			/**
			 * Returns the internal data of this item cast to a Version. If the data is not stored as
			 * a Version, a conversion exception might be thrown.
			 */
			readonly _version: GH_IO.Types.GH_Version;

			/** Creates a new instance of GH_Item and sets the fields from a reader object. */
			static CreateFrom(reader: unknown): GH_IO.Types.GH_Item;

			/** Creates a new instance of GH_Item and sets the fields from an Xml node object. */
			static CreateFrom(node: unknown): GH_IO.Types.GH_Item;

			/** Serialize this item into a binary stream. */
			Write(writer: unknown): void;

			/** Deserialize this item from a binary stream. */
			Read(reader: unknown): void;

			/** Serialize this item into an Xml stream. */
			Write(writer: unknown): void;

			/** Deserialize this item from an Xml node. */
			Read(node: unknown): void;

			/** Converts the struct into a human readable format. */
			ToString(): string;
		}
	}

	export namespace GH_IO.Types {
		/** Contains flags for all data types currently supported by GH_IO.dll */
		export enum GH_Types {
			/**
			 * Represents an unset type. GH_Items with this type will throw exceptions during
			 * serialization.
			 */
			unset = 0,

			/** boolean */
			gh_bool = 1,

			/** byte */
			gh_byte = 2,

			/** 32 bit integer */
			gh_int32 = 3,

			/** 64 bit integer */
			gh_int64 = 4,

			/** single precision floating point number */
			gh_single = 5,

			/** double precision floating point number */
			gh_double = 6,

			/** decimal number */
			gh_decimal = 7,

			/** date time structure */
			gh_date = 8,

			/** 128 bit globally unique identifier */
			gh_guid = 9,

			/** unicode string */
			gh_string = 10,

			/** an array of bytes */
			gh_bytearray = 20,

			/** an array of doubles */
			gh_doublearray = 21,

			/** gdi+ integer precision point */
			gh_drawing_point = 30,

			/** gdi+ single precision point */
			gh_drawing_pointf = 31,

			/** gdi+ integer precision size */
			gh_drawing_size = 32,

			/** gdi+ single precision size */
			gh_drawing_sizef = 33,

			/** gdi+ integer precision rectangle */
			gh_drawing_rectangle = 34,

			/** gdi+ single precision rectangle */
			gh_drawing_rectanglef = 35,

			/** gdi+ argb color */
			gh_drawing_color = 36,

			/** gdi+ bitmap (png format bytestream) */
			gh_drawing_bitmap = 37,

			/** double precision two-dimensional point */
			gh_point2d = 50,

			/** double precision three-dimensional point */
			gh_point3d = 51,

			/** double precision four-dimensional point */
			gh_point4d = 52,

			/** double precision one-dimensional numeric interval */
			gh_interval1d = 60,

			/** double precision two-dimensional numeric interval */
			gh_interval2d = 61,

			/** double precision three-dimensional line segment */
			gh_line = 70,

			/** double precision three-dimensional box volume */
			gh_boundingbox = 71,

			/** double precision three-dimensional plane construct */
			gh_plane = 72,

			/** version structure with major, minor and revision fields */
			gh_version = 80,
		}
	}

	export namespace GH_IO.UserInterface {
		/** Viewer/Browser that displays a list of archive messages. */
		export class GH_ArchiveMessageViewer {
			/** Constructor. */
			constructor();

			/** Set a new archive. The messages in this archive will be displayed on the form. */
			SetArchive(nArchive: GH_IO.Serialization.GH_Archive): void;
		}
	}

	export namespace GH_IO.UserInterface {
		/**
		 * Constains a set of static fields and properties regarding  developer contact details.
		 */
		export class GH_DeveloperDetails {
			/** Gets the default developer contact details. */
			static readonly DefaultDeveloperContact: string;

			/**
			 * Gets or sets the local developer contact info (e-mail).  By default, the developer
			 * email is DefaultDeveloperContact;  This email address is used in the Message Report
			 * viewer when sending a support e-mail.
			 */
			static DeveloperContact: string;
		}
	}

	export namespace GH_IO.Serialization {
		/**
		 * This is the base archive class which takes care of all (de)serialization and
		 * messaging.
		 */
		export class GH_Archive {
			constructor();

			/**
			 * Gets the file extension (including the dot) associated with Grasshopper® Binary data.
			 */
			static readonly GrasshopperBinaryExtension: string;

			/** Gets the file extension (including the dot) associated with Grasshopper® XML data. */
			static readonly GrasshopperXmlExtension: string;

			/**
			 * Gets the file extension (including the dot) associated with Grasshopper® User Object
			 * file.
			 */
			static readonly GrasshopperUserExtension: string;

			/** Gets the version number of the current GH_IO build. */
			static readonly GH_IO_Version: GH_IO.Types.GH_Version;

			/** Gets the internal list of messages. */
			readonly Messages: unknown;

			/**
			 * Gets the worst case message type.  If the record contains at least 1 error, the worst
			 * case is GH_Message_Type.error.  If the record contains no errors, but at least 1
			 * warning,  the worst case is GH_Message_Type.warning.  If the record contains no
			 * messages or only infos, the worst case type is GH_Message_Type.info.
			 */
			readonly WorstCaseMessageType: GH_IO.Serialization.GH_Message_Type;

			/**
			 * Gets the root node of this archive.  Typically you do not need to modify the Root.
			 * Use functions like CreateTopLevelNode(), AppendObject() and ExtractObject() instead.
			 * If you modify the Root node, you may corrupt the archive.
			 */
			GetRootNode: GH_IO.Serialization.GH_Chunk;

			/**
			 * Gets the path to the file from which this archive was read and/or written to.  If the
			 * archive hasn't been read or written yet, this field will be null.
			 */
			Path: string;

			/** Gets a value that indicates whether or not the path field has been set. */
			readonly IsPath: boolean;

			/**
			 * Gets a value that indicates whether the Path field points to a Binary Grasshopper
			 * file.
			 */
			readonly IsBinaryPath: boolean;

			/**
			 * Gets a value that indicates whether the Path field points to an Xml Grasshopper file.
			 */
			readonly IsXmlPath: boolean;

			/**
			 * Gets the filename (without extension) of the currently loaded data tree. If the path
			 * field has not been set, "unnamed" is returned.
			 */
			readonly FileName: string;

			/** Add a new message to the record. */
			AddMessage(
				messageText: string,
				messageType: GH_IO.Serialization.GH_Message_Type,
			): void;

			/** Add a new message to the record. */
			AddMessage(message: GH_IO.Serialization.GH_Message): void;

			/** Gets the number of messages recorded since the most recent IO operation began. */
			MessageCount(): number;

			/**
			 * Gets the number of messages recorded since the most recent IO operation began.
			 * Message count can be filtered by message type.
			 */
			MessageCount(
				includeInfo: boolean,
				includeWarnings: boolean,
				includeErrors: boolean,
			): number;

			/** Remove all messages from the log. */
			ClearMessages(): void;

			/**
			 * Displays the message log viewer. You should typically only display the viewer if  the
			 * WorstCaseMessageType equals GH_Message_Type.warning or GH_Message_Type.error
			 */
			ShowMessageLog(): unknown;

			/**
			 * Creates and returns a new root node for this archive in the form of a GH_IWriter
			 * instance.  Typically you do not call this method. If you want to add an object to the
			 * archive, use AppendObject() instead.
			 */
			CreateTopLevelNode(rootName: string): GH_IO.Serialization.GH_IWriter;

			/**
			 * Discards the current data tree and instantiates a new root node.  This root node
			 * contains some comments, a version value containing the current version of GH_IO.dll
			 * and a DateTime value containing the current date and time.
			 */
			CreateNewRoot(forWriting: boolean): void;

			static SaveFileDialog(
				title: string,
				filePath: string,
				additionalFilters: unknown,
			): boolean;

			static OpenFileDialog(
				title: string,
				filePath: string,
				additionalFilters: unknown,
			): boolean;

			/**
			 * Appends a target object into the root node of this archive tree.  If the root doesn't
			 * exist yet, it will be created. Existing objects at the root scope  will not be
			 * affected.
			 */
			AppendObject(
				target: GH_IO.GH_ISerializable,
				targetName: string,
			): boolean;

			/** Extract a target object from the data tree. */
			ExtractObject(
				target: GH_IO.GH_ISerializable,
				targetName: string,
			): boolean;

			/** Writes the current tree to a file. */
			WriteToFile(
				fileName: string,
				overwrite: boolean,
				rememberPath: boolean,
			): boolean;

			/** Reads a new archive tree from a file. */
			ReadFromFile(fileName: string): boolean;

			/** Serializes the data tree into an Xml string. */
			Serialize_Xml(): string;

			/** Deserializes an Xml string. */
			Deserialize_Xml(xmlContent: string): boolean;

			/** Serializes the data tree into a Binary byte array. */
			Serialize_Binary(): number[];

			/** Deserializes an array of bytes. */
			Deserialize_Binary(data: number[]): boolean;
		}
	}

	export namespace GH_IO.Serialization {
		/**
		 * This class is needed to override the UTF-16 encoding property of the default DotNET
		 * StringWriter.
		 */
		export class EncodedStringWriter {
			constructor();

			/** Always return UTF-8. */
			readonly Encoding: unknown;
		}
	}

	export namespace GH_IO.Serialization {
		/** Provides static methods for compression of byte-arrays. */
		export class GH_Compression {
			/** Compress an array of bytes using the Deflate algorithm. */
			static Compress(data: number[]): number[];

			/** Decompress an array of bytes using the Deflate algorithm. */
			static Decompress(compressedData: number[]): number[];
		}
	}

	export namespace GH_IO.Serialization {
		/** An ID is used to uniquely identify a specific item. */
		export class ID {
			/** Constuctor for IDs. */
			constructor(name: string);

			/** Constructor for IDs. */
			constructor(
				name: string,
				index: number,
			);

			/** Gets the name of this ID. */
			readonly Name: string;

			/** Gets whether the name has been set.  Every valid ID must have a name. */
			readonly HasName: boolean;

			/** Gets the index of this ID, if there is no valid index then -1 is returned. */
			readonly Index: number;

			/** Gets whether the index has been set. */
			readonly HasIndex: boolean;

			/** Gets the hash code. */
			readonly Hash: number;

			/** Gets the hash code. */
			GetHashCode(): number;

			/** Compares this ID to another ID. */
			CompareTo(other: GH_IO.Serialization.ID): number;

			/** Determines if two IDs are equal. */
			Equals(other: GH_IO.Serialization.ID): boolean;

			/** Gets a string representation for this ID. */
			ToString(): string;
		}
	}

	export namespace GH_IO.Serialization {
		/**
		 * Full implementation of GH_IChunk, GH_IReader, GH_IWriter, GH_IBinarySupport and
		 * GH_IXmlSupport.  Instances of this class are usually disguised as one of the
		 * interfaces it implements.
		 */
		export class GH_Chunk implements
			GH_IO.Serialization.GH_IWriter,
			GH_IO.Serialization.GH_IChunk,
			GH_IO.Serialization.GH_IBinarySupport,
			GH_IO.Serialization.GH_IXmlSupport,
			GH_IO.Serialization.GH_IReader {
			/**
			 * Gets a pointer to the archive that owns the Root of the tree this chunk belongs to.
			 */
			readonly Archive: GH_IO.Serialization.GH_Archive;

			/**
			 * Gets a string representing the URI with which the archive is associated.  The location
			 * may be a null string.
			 */
			readonly ArchiveLocation: string;

			/**
			 * Gets the name validity of this item.  The item is considered to have an invalid name
			 * if string.IsNullOrEmpty(name)
			 */
			readonly HasName: boolean;

			/**
			 * Gets the index existence implication. The item is considered to have an index
			 * qualifier  if the index value is larger than or equal to zero.
			 */
			readonly HasIndex: boolean;

			/**
			 * Gets a value that indicates whether or not comments have been stored in this chunk.
			 */
			readonly HasComments: boolean;

			/**
			 * Gets the name of this chunk. The name is set by the owner of this chunk.  Names must
			 * be at least 1 character long.  The combination of name+index is always unique among a
			 * set of chunks in a single litter.
			 */
			readonly Name: string;

			/**
			 * Gets the index of this chunk. The index is set by the owner of this chunk.  Indices
			 * smaller than zero imply no index has been set.  The combination of name+index is
			 * always unique among a set of chunks in the same litter.
			 */
			readonly Index: number;

			/** Gets the number of items contained in this chunk. */
			readonly ItemCount: number;

			/**
			 * Gets a pointer to the internal list of items.  Do not access this list unless you know
			 * what you are doing.
			 */
			readonly Items: unknown;

			/**
			 * Gets the number of child chunks contained in this chunk.  The set of all child chunks
			 * is referred to as a 'litter'.
			 */
			readonly ChunkCount: number;

			/**
			 * Gets a pointer to the internal list of child chunks.  Do not access this list unless
			 * you know what you are doing.
			 */
			readonly Chunks: unknown;

			/**
			 * Construct a new instance of GH_Chunk which acts as a Root node. If you must create a
			 * chunk from scratch, use this static method to create one.
			 */
			static InstantiateRoot(owner: GH_IO.Serialization.GH_Archive): GH_IO.Serialization.GH_Chunk;

			/**
			 * Log a new message with the top-level archive.  Messages are collected during
			 * read/write operations,  and can be displayed to the user upon completion using
			 * GH_Archive.ShowMessageLog().
			 */
			AddMessage(
				m: string,
				t: GH_IO.Serialization.GH_Message_Type,
			): void;

			/** Copy all values and sub-chunks from another chunk. */
			CopyValuesFromChunk(other: GH_IO.Serialization.GH_Chunk): void;

			/**
			 * Copy all values and sub-chunks in this chunk to another chunk which does not point to
			 * the same archive.
			 */
			CopyValuesToChunk(): GH_IO.Serialization.GH_Chunk;

			/**
			 * Adds a text comment to this chunk. Comments are serialized only if the output flavour
			 * is a  human readable format. Comments are never deserialized, they are purely for the
			 * benefit of the humans reading the file data.
			 */
			AddComment(comment_text: string): void;

			/**
			 * Finds the first item that matches the given name.  Only items without index qualifiers
			 * are considered.  Name comparisons are not case-sensitive.
			 */
			FindItem(name: string): GH_IO.Types.GH_Item;

			/**
			 * Finds the first item that matches the given name and index.  Only items with index
			 * qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			FindItem(
				name: string,
				index: number,
			): GH_IO.Types.GH_Item;

			/**
			 * Gets the occupancy for a specific item name. Only items without index qualifiers are
			 * considered.
			 */
			ItemExists(name: string): boolean;

			/**
			 * Checks whether an item with the specified name and index exists.  Only items with
			 * index qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			ItemExists(
				name: string,
				index: number,
			): boolean;

			/** Remove an unindexed item from this chunk. */
			RemoveItem(itemName: string): boolean;

			/** Remove an indexed item from this chunk. */
			RemoveItem(
				itemName: string,
				itemIndex: number,
			): boolean;

			/**
			 * Finds the first chunk in the litter that matches the given name.  Only chunks without
			 * index qualifiers are considered.
			 */
			FindChunk(name: string): GH_IO.Serialization.GH_IReader;

			/**
			 * Finds the first chunk in the list that matches the given name and index.  Only chunks
			 * with index qualifiers are considered.
			 */
			FindChunk(
				name: string,
				index: number,
			): GH_IO.Serialization.GH_IReader;

			/**
			 * Checks whether a chunk with the specified name exists in the litter.  Only chunks
			 * without index qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			ChunkExists(name: string): boolean;

			/**
			 * Checks whether a chunk with the specified name and index exists in the litter.  Only
			 * chunks with index qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			ChunkExists(
				name: string,
				index: number,
			): boolean;

			/**
			 * Create a new child chunk with the specified name and without an index qualifier.  If
			 * another chunk already exists with similar properties, an exception will be thrown.
			 */
			CreateChunk(chunk_name: string): GH_IO.Serialization.GH_IWriter;

			/**
			 * Create a new child chunk with the specified name and index qualifier.  If another
			 * chunk already exists with similar properties, an exception will be thrown.
			 */
			CreateChunk(
				chunk_name: string,
				chunk_index: number,
			): GH_IO.Serialization.GH_IWriter;

			/**
			 * Remove the first chunk with a matching name.  Only chunks without index qualifiers are
			 * considered.  Name comparisons are not case-sensitive.
			 */
			RemoveChunk(chunk_name: string): boolean;

			/**
			 * Remove the first chunk with a matching name and index.  Only chunks with index
			 * qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			RemoveChunk(
				chunk_name: string,
				chunk_index: number,
			): boolean;

			/** Remove the specified chunk from the litter. */
			RemoveChunk(chunk: GH_IO.Serialization.GH_IChunk): boolean;

			/** Write this chunk and all child chunks to a binary stream. */
			Write(writer: unknown): void;

			/** Read this chunk and all child chunks from a binary stream. */
			Read(reader: unknown): void;

			/** Serialize this chunk into an Xml stream. */
			Write(writer: unknown): void;

			/** Read this chunk and all child chunks from an Xml node. */
			Read(node: unknown): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetBoolean(
				item_name: string,
				item_value: boolean,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetBoolean(
				item_name: string,
				item_index: number,
				item_value: boolean,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetByte(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetByte(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetInt32(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetInt32(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetInt64(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetInt64(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetSingle(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetSingle(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDouble(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDouble(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDecimal(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDecimal(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDate(
				item_name: string,
				item_value: DateTime,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDate(
				item_name: string,
				item_index: number,
				item_value: DateTime,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetGuid(
				item_name: string,
				item_value: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetGuid(
				item_name: string,
				item_index: number,
				item_value: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetString(
				item_name: string,
				item_value: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetString(
				item_name: string,
				item_index: number,
				item_value: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPath(
				item_name: string,
				absolutePath: string,
				basePath: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPath(
				item_name: string,
				item_index: number,
				absolutePath: string,
				basePath: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingPoint(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingPoint(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingPointF(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingPointF(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingSize(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingSize(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingSizeF(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingSizeF(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingRectangle(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingRectangle(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingRectangleF(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingRectangleF(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingColor(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingColor(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingBitmap(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingBitmap(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetByteArray(
				item_name: string,
				item_value: number[],
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetByteArray(
				item_name: string,
				item_index: number,
				item_value: number[],
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDoubleArray(
				item_name: string,
				item_value: number[],
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDoubleArray(
				item_name: string,
				item_index: number,
				item_value: number[],
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetPoint2D(
				item_name: string,
				item_value: GH_IO.Types.GH_Point2D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPoint2D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Point2D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetPoint3D(
				item_name: string,
				item_value: GH_IO.Types.GH_Point3D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPoint3D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Point3D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetPoint4D(
				item_name: string,
				item_value: GH_IO.Types.GH_Point4D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPoint4D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Point4D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetInterval1D(
				item_name: string,
				item_value: GH_IO.Types.GH_Interval1D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetInterval1D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Interval1D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetInterval2D(
				item_name: string,
				item_value: GH_IO.Types.GH_Interval2D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetInterval2D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Interval2D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetLine(
				item_name: string,
				item_value: GH_IO.Types.GH_Line,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetLine(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Line,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetBoundingBox(
				item_name: string,
				item_value: GH_IO.Types.GH_BoundingBox,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetBoundingBox(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_BoundingBox,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetPlane(
				item_name: string,
				item_value: GH_IO.Types.GH_Plane,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPlane(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Plane,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetVersion(
				item_name: string,
				major: number,
				minor: number,
				revision: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetVersion(
				item_name: string,
				item_index: number,
				major: number,
				minor: number,
				revision: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetVersion(
				item_name: string,
				item_value: GH_IO.Types.GH_Version,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetVersion(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Version,
			): void;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetBoolean(item_name: string): boolean;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetBoolean(
				item_name: string,
				item_index: number,
			): boolean;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetByte(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetByte(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetInt32(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetInt32(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetInt64(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetInt64(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetSingle(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetSingle(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDouble(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDouble(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDecimal(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDecimal(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDate(item_name: string): DateTime;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDate(
				item_name: string,
				item_index: number,
			): DateTime;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetGuid(item_name: string): string;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetGuid(
				item_name: string,
				item_index: number,
			): string;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetString(item_name: string): string;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetString(
				item_name: string,
				item_index: number,
			): string;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPath(
				item_name: string,
				basePath: string,
			): string[];

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPath(
				item_name: string,
				item_index: number,
				basePath: string,
			): string[];

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingPoint(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingPoint(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingPointF(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingPointF(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingSize(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingSize(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingSizeF(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingSizeF(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingRectangle(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingRectangle(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingRectangleF(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingRectangleF(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingColor(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingColor(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingBitmap(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingBitmap(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetByteArray(item_name: string): number[];

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetByteArray(
				item_name: string,
				item_index: number,
			): number[];

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDoubleArray(item_name: string): number[];

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDoubleArray(
				item_name: string,
				item_index: number,
			): number[];

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint2D(item_name: string): GH_IO.Types.GH_Point2D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint2D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Point2D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint3D(item_name: string): GH_IO.Types.GH_Point3D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint3D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Point3D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint4D(item_name: string): GH_IO.Types.GH_Point4D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint4D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Point4D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetInterval1D(item_name: string): GH_IO.Types.GH_Interval1D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetInterval1D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Interval1D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetInterval2D(item_name: string): GH_IO.Types.GH_Interval2D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetInterval2D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Interval2D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetLine(item_name: string): GH_IO.Types.GH_Line;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetLine(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Line;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetBoundingBox(item_name: string): GH_IO.Types.GH_BoundingBox;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetBoundingBox(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_BoundingBox;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPlane(item_name: string): GH_IO.Types.GH_Plane;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPlane(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Plane;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetVersion(item_name: string): GH_IO.Types.GH_Version;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetVersion(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Version;

			TryGetBoolean(
				item_name: string,
				value: boolean,
			): boolean;

			TryGetBoolean(
				item_name: string,
				item_index: number,
				value: boolean,
			): boolean;

			TryGetByte(
				item_name: string,
				value: number,
			): boolean;

			TryGetByte(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetInt32(
				item_name: string,
				value: number,
			): boolean;

			TryGetInt32(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetInt64(
				item_name: string,
				value: number,
			): boolean;

			TryGetInt64(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetSingle(
				item_name: string,
				value: number,
			): boolean;

			TryGetSingle(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetDouble(
				item_name: string,
				value: number,
			): boolean;

			TryGetDouble(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetDecimal(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDecimal(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDate(
				item_name: string,
				value: DateTime,
			): boolean;

			TryGetDate(
				item_name: string,
				item_index: number,
				value: DateTime,
			): boolean;

			TryGetGuid(
				item_name: string,
				value: string,
			): boolean;

			TryGetGuid(
				item_name: string,
				item_index: number,
				value: string,
			): boolean;

			TryGetString(
				item_name: string,
				value: string,
			): boolean;

			TryGetString(
				item_name: string,
				item_index: number,
				value: string,
			): boolean;

			TryGetDrawingPoint(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingPoint(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingPointF(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingPointF(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingSize(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingSize(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingSizeF(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingSizeF(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingRectangle(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingRectangle(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingRectangleF(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingRectangleF(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingColor(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingColor(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetPoint2D(
				item_name: string,
				value: GH_IO.Types.GH_Point2D,
			): boolean;

			TryGetPoint2D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Point2D,
			): boolean;

			TryGetPoint3D(
				item_name: string,
				value: GH_IO.Types.GH_Point3D,
			): boolean;

			TryGetPoint3D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Point3D,
			): boolean;

			TryGetPoint4D(
				item_name: string,
				value: GH_IO.Types.GH_Point4D,
			): boolean;

			TryGetPoint4D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Point4D,
			): boolean;

			TryGetInterval1D(
				item_name: string,
				value: GH_IO.Types.GH_Interval1D,
			): boolean;

			TryGetInterval1D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Interval1D,
			): boolean;

			TryGetInterval2D(
				item_name: string,
				value: GH_IO.Types.GH_Interval2D,
			): boolean;

			TryGetInterval2D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Interval2D,
			): boolean;

			TryGetLine(
				item_name: string,
				value: GH_IO.Types.GH_Line,
			): boolean;

			TryGetLine(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Line,
			): boolean;

			TryGetBoundingBox(
				item_name: string,
				value: GH_IO.Types.GH_BoundingBox,
			): boolean;

			TryGetBoundingBox(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_BoundingBox,
			): boolean;

			TryGetPlane(
				item_name: string,
				value: GH_IO.Types.GH_Plane,
			): boolean;

			TryGetPlane(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Plane,
			): boolean;

			TryGetVersion(
				item_name: string,
				value: GH_IO.Types.GH_Version,
			): boolean;

			TryGetVersion(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Version,
			): boolean;
		}
	}

	export namespace GH_IO.Serialization.GH_Chunk {
		export class ChunkKeyedCollection {
			constructor();

			readonly Count: number;

			Add(chunk: GH_IO.Serialization.GH_Chunk): void;

			Remove(chunk: GH_IO.Serialization.GH_Chunk): boolean;

			Remove(id: GH_IO.Serialization.ID): boolean;

			Clear(): void;

			TryGetValue(id: GH_IO.Serialization.ID): GH_IO.Serialization.GH_Chunk | undefined;

			GetEnumerator(): unknown;
		}
	}

	export namespace GH_IO.Serialization {
		/** A utility class for creating partial archives. */
		export class GH_LooseChunk implements
			GH_IO.Serialization.GH_IWriter,
			GH_IO.Serialization.GH_IChunk,
			GH_IO.Serialization.GH_IBinarySupport,
			GH_IO.Serialization.GH_IXmlSupport,
			GH_IO.Serialization.GH_IReader {
			/**
			 * Create a new loose chunk. A loose chunk does not have an owner archive  and thus
			 * cannot store runtime messages.
			 */
			constructor(chunk_name: string);

			/**
			 * Create a new loose chunk. A loose chunk does not have an owner archive  and thus
			 * cannot store runtime messages.
			 */
			constructor(
				chunk_name: string,
				chunk_index: number,
			);

			/**
			 * Gets a pointer to the archive that owns the Root of the tree this chunk belongs to.
			 */
			readonly Archive: GH_IO.Serialization.GH_Archive;

			/**
			 * Gets a string representing the URI with which the archive is associated.  The location
			 * may be a null string.
			 */
			readonly ArchiveLocation: string;

			/**
			 * Gets the name validity of this item.  The item is considered to have an invalid name
			 * if string.IsNullOrEmpty(name)
			 */
			readonly HasName: boolean;

			/**
			 * Gets the index existence implication. The item is considered to have an index
			 * qualifier  if the index value is larger than or equal to zero.
			 */
			readonly HasIndex: boolean;

			/**
			 * Gets a value that indicates whether or not comments have been stored in this chunk.
			 */
			readonly HasComments: boolean;

			/**
			 * Gets the name of this chunk. The name is set by the owner of this chunk.  Names must
			 * be at least 1 character long.  The combination of name+index is always unique among a
			 * set of chunks in a single litter.
			 */
			readonly Name: string;

			/**
			 * Gets the index of this chunk. The index is set by the owner of this chunk.  Indices
			 * smaller than zero imply no index has been set.  The combination of name+index is
			 * always unique among a set of chunks in the same litter.
			 */
			readonly Index: number;

			/** Gets the number of items contained in this chunk. */
			readonly ItemCount: number;

			/**
			 * Gets a pointer to the internal list of items.  Do not access this list unless you know
			 * what you are doing.
			 */
			readonly Items: unknown;

			/**
			 * Gets the number of child chunks contained in this chunk.  The set of all child chunks
			 * is referred to as a 'litter'.
			 */
			readonly ChunkCount: number;

			/**
			 * Gets a pointer to the internal list of child chunks.  Do not access this list unless
			 * you know what you are doing.
			 */
			readonly Chunks: unknown;

			/** Serializes the data tree into a byte array. */
			Serialize_Binary(): number[];

			/** Deserializes a byte array. */
			Deserialize_Binary(content: number[]): void;

			/** Serializes the data tree into an Xml string. */
			Serialize_Xml(): string;

			/** Deserializes an Xml string. */
			Deserialize_Xml(xml_content: string): void;

			/**
			 * Log a new message with the top-level archive.  Messages are collected during
			 * read/write operations,  and can be displayed to the user upon completion using
			 * GH_Archive.ShowMessageLog().
			 */
			AddMessage(
				m: string,
				t: GH_IO.Serialization.GH_Message_Type,
			): void;

			/** Copy all values and sub-chunks from another chunk. */
			CopyValuesFromChunk(other: GH_IO.Serialization.GH_Chunk): void;

			/**
			 * Copy all values and sub-chunks in this chunk to another chunk which does not point to
			 * the same archive.
			 */
			CopyValuesToChunk(): GH_IO.Serialization.GH_Chunk;

			/**
			 * Adds a text comment to this chunk. Comments are serialized only if the output flavour
			 * is a  human readable format. Comments are never deserialized, they are purely for the
			 * benefit of the humans reading the file data.
			 */
			AddComment(comment_text: string): void;

			/**
			 * Finds the first item that matches the given name.  Only items without index qualifiers
			 * are considered.  Name comparisons are not case-sensitive.
			 */
			FindItem(name: string): GH_IO.Types.GH_Item;

			/**
			 * Finds the first item that matches the given name and index.  Only items with index
			 * qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			FindItem(
				name: string,
				index: number,
			): GH_IO.Types.GH_Item;

			/**
			 * Gets the occupancy for a specific item name. Only items without index qualifiers are
			 * considered.
			 */
			ItemExists(name: string): boolean;

			/**
			 * Checks whether an item with the specified name and index exists.  Only items with
			 * index qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			ItemExists(
				name: string,
				index: number,
			): boolean;

			/** Remove an unindexed item from this chunk. */
			RemoveItem(itemName: string): boolean;

			/** Remove an indexed item from this chunk. */
			RemoveItem(
				itemName: string,
				itemIndex: number,
			): boolean;

			/**
			 * Finds the first chunk in the litter that matches the given name.  Only chunks without
			 * index qualifiers are considered.
			 */
			FindChunk(name: string): GH_IO.Serialization.GH_IReader;

			/**
			 * Finds the first chunk in the list that matches the given name and index.  Only chunks
			 * with index qualifiers are considered.
			 */
			FindChunk(
				name: string,
				index: number,
			): GH_IO.Serialization.GH_IReader;

			/**
			 * Checks whether a chunk with the specified name exists in the litter.  Only chunks
			 * without index qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			ChunkExists(name: string): boolean;

			/**
			 * Checks whether a chunk with the specified name and index exists in the litter.  Only
			 * chunks with index qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			ChunkExists(
				name: string,
				index: number,
			): boolean;

			/**
			 * Create a new child chunk with the specified name and without an index qualifier.  If
			 * another chunk already exists with similar properties, an exception will be thrown.
			 */
			CreateChunk(chunk_name: string): GH_IO.Serialization.GH_IWriter;

			/**
			 * Create a new child chunk with the specified name and index qualifier.  If another
			 * chunk already exists with similar properties, an exception will be thrown.
			 */
			CreateChunk(
				chunk_name: string,
				chunk_index: number,
			): GH_IO.Serialization.GH_IWriter;

			/**
			 * Remove the first chunk with a matching name.  Only chunks without index qualifiers are
			 * considered.  Name comparisons are not case-sensitive.
			 */
			RemoveChunk(chunk_name: string): boolean;

			/**
			 * Remove the first chunk with a matching name and index.  Only chunks with index
			 * qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			RemoveChunk(
				chunk_name: string,
				chunk_index: number,
			): boolean;

			/** Remove the specified chunk from the litter. */
			RemoveChunk(chunk: GH_IO.Serialization.GH_IChunk): boolean;

			/** Write this chunk and all child chunks to a binary stream. */
			Write(writer: unknown): void;

			/** Read this chunk and all child chunks from a binary stream. */
			Read(reader: unknown): void;

			/** Serialize this chunk into an Xml stream. */
			Write(writer: unknown): void;

			/** Read this chunk and all child chunks from an Xml node. */
			Read(node: unknown): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetBoolean(
				item_name: string,
				item_value: boolean,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetBoolean(
				item_name: string,
				item_index: number,
				item_value: boolean,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetByte(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetByte(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetInt32(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetInt32(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetInt64(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetInt64(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetSingle(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetSingle(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDouble(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDouble(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDecimal(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDecimal(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDate(
				item_name: string,
				item_value: DateTime,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDate(
				item_name: string,
				item_index: number,
				item_value: DateTime,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetGuid(
				item_name: string,
				item_value: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetGuid(
				item_name: string,
				item_index: number,
				item_value: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetString(
				item_name: string,
				item_value: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetString(
				item_name: string,
				item_index: number,
				item_value: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPath(
				item_name: string,
				absolutePath: string,
				basePath: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPath(
				item_name: string,
				item_index: number,
				absolutePath: string,
				basePath: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingPoint(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingPoint(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingPointF(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingPointF(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingSize(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingSize(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingSizeF(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingSizeF(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingRectangle(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingRectangle(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingRectangleF(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingRectangleF(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingColor(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingColor(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingBitmap(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingBitmap(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetByteArray(
				item_name: string,
				item_value: number[],
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetByteArray(
				item_name: string,
				item_index: number,
				item_value: number[],
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDoubleArray(
				item_name: string,
				item_value: number[],
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDoubleArray(
				item_name: string,
				item_index: number,
				item_value: number[],
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetPoint2D(
				item_name: string,
				item_value: GH_IO.Types.GH_Point2D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPoint2D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Point2D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetPoint3D(
				item_name: string,
				item_value: GH_IO.Types.GH_Point3D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPoint3D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Point3D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetPoint4D(
				item_name: string,
				item_value: GH_IO.Types.GH_Point4D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPoint4D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Point4D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetInterval1D(
				item_name: string,
				item_value: GH_IO.Types.GH_Interval1D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetInterval1D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Interval1D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetInterval2D(
				item_name: string,
				item_value: GH_IO.Types.GH_Interval2D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetInterval2D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Interval2D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetLine(
				item_name: string,
				item_value: GH_IO.Types.GH_Line,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetLine(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Line,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetBoundingBox(
				item_name: string,
				item_value: GH_IO.Types.GH_BoundingBox,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetBoundingBox(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_BoundingBox,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetPlane(
				item_name: string,
				item_value: GH_IO.Types.GH_Plane,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPlane(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Plane,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetVersion(
				item_name: string,
				major: number,
				minor: number,
				revision: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetVersion(
				item_name: string,
				item_index: number,
				major: number,
				minor: number,
				revision: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetVersion(
				item_name: string,
				item_value: GH_IO.Types.GH_Version,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetVersion(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Version,
			): void;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetBoolean(item_name: string): boolean;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetBoolean(
				item_name: string,
				item_index: number,
			): boolean;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetByte(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetByte(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetInt32(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetInt32(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetInt64(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetInt64(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetSingle(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetSingle(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDouble(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDouble(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDecimal(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDecimal(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDate(item_name: string): DateTime;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDate(
				item_name: string,
				item_index: number,
			): DateTime;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetGuid(item_name: string): string;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetGuid(
				item_name: string,
				item_index: number,
			): string;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetString(item_name: string): string;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetString(
				item_name: string,
				item_index: number,
			): string;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPath(
				item_name: string,
				basePath: string,
			): string[];

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPath(
				item_name: string,
				item_index: number,
				basePath: string,
			): string[];

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingPoint(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingPoint(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingPointF(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingPointF(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingSize(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingSize(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingSizeF(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingSizeF(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingRectangle(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingRectangle(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingRectangleF(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingRectangleF(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingColor(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingColor(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingBitmap(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingBitmap(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetByteArray(item_name: string): number[];

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetByteArray(
				item_name: string,
				item_index: number,
			): number[];

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDoubleArray(item_name: string): number[];

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDoubleArray(
				item_name: string,
				item_index: number,
			): number[];

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint2D(item_name: string): GH_IO.Types.GH_Point2D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint2D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Point2D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint3D(item_name: string): GH_IO.Types.GH_Point3D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint3D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Point3D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint4D(item_name: string): GH_IO.Types.GH_Point4D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint4D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Point4D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetInterval1D(item_name: string): GH_IO.Types.GH_Interval1D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetInterval1D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Interval1D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetInterval2D(item_name: string): GH_IO.Types.GH_Interval2D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetInterval2D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Interval2D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetLine(item_name: string): GH_IO.Types.GH_Line;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetLine(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Line;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetBoundingBox(item_name: string): GH_IO.Types.GH_BoundingBox;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetBoundingBox(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_BoundingBox;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPlane(item_name: string): GH_IO.Types.GH_Plane;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPlane(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Plane;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetVersion(item_name: string): GH_IO.Types.GH_Version;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetVersion(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Version;

			TryGetBoolean(
				item_name: string,
				value: boolean,
			): boolean;

			TryGetBoolean(
				item_name: string,
				item_index: number,
				value: boolean,
			): boolean;

			TryGetByte(
				item_name: string,
				value: number,
			): boolean;

			TryGetByte(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetInt32(
				item_name: string,
				value: number,
			): boolean;

			TryGetInt32(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetInt64(
				item_name: string,
				value: number,
			): boolean;

			TryGetInt64(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetSingle(
				item_name: string,
				value: number,
			): boolean;

			TryGetSingle(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetDouble(
				item_name: string,
				value: number,
			): boolean;

			TryGetDouble(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetDecimal(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDecimal(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDate(
				item_name: string,
				value: DateTime,
			): boolean;

			TryGetDate(
				item_name: string,
				item_index: number,
				value: DateTime,
			): boolean;

			TryGetGuid(
				item_name: string,
				value: string,
			): boolean;

			TryGetGuid(
				item_name: string,
				item_index: number,
				value: string,
			): boolean;

			TryGetString(
				item_name: string,
				value: string,
			): boolean;

			TryGetString(
				item_name: string,
				item_index: number,
				value: string,
			): boolean;

			TryGetDrawingPoint(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingPoint(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingPointF(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingPointF(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingSize(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingSize(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingSizeF(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingSizeF(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingRectangle(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingRectangle(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingRectangleF(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingRectangleF(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingColor(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingColor(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetPoint2D(
				item_name: string,
				value: GH_IO.Types.GH_Point2D,
			): boolean;

			TryGetPoint2D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Point2D,
			): boolean;

			TryGetPoint3D(
				item_name: string,
				value: GH_IO.Types.GH_Point3D,
			): boolean;

			TryGetPoint3D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Point3D,
			): boolean;

			TryGetPoint4D(
				item_name: string,
				value: GH_IO.Types.GH_Point4D,
			): boolean;

			TryGetPoint4D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Point4D,
			): boolean;

			TryGetInterval1D(
				item_name: string,
				value: GH_IO.Types.GH_Interval1D,
			): boolean;

			TryGetInterval1D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Interval1D,
			): boolean;

			TryGetInterval2D(
				item_name: string,
				value: GH_IO.Types.GH_Interval2D,
			): boolean;

			TryGetInterval2D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Interval2D,
			): boolean;

			TryGetLine(
				item_name: string,
				value: GH_IO.Types.GH_Line,
			): boolean;

			TryGetLine(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Line,
			): boolean;

			TryGetBoundingBox(
				item_name: string,
				value: GH_IO.Types.GH_BoundingBox,
			): boolean;

			TryGetBoundingBox(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_BoundingBox,
			): boolean;

			TryGetPlane(
				item_name: string,
				value: GH_IO.Types.GH_Plane,
			): boolean;

			TryGetPlane(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Plane,
			): boolean;

			TryGetVersion(
				item_name: string,
				value: GH_IO.Types.GH_Version,
			): boolean;

			TryGetVersion(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Version,
			): boolean;
		}
	}

	export namespace GH_IO.Serialization {
		/** Message type flag. */
		export enum GH_Message_Type {
			/** Indicates a message represents information. */
			info = 0,

			/**
			 * Indicates the message represents a warning. Warnings are not severe enough to be
			 * regarded as IO errors.
			 */
			warning = 1,

			/**
			 * Indicates the message represents an error. Errors mean (de)serialization failed
			 * (partially).
			 */
			error = 2,
		}
	}

	export namespace GH_IO.Serialization {
		/**
		 * Represents an archive log message.  Messages are collected during read/write
		 * operations.
		 */
		export class GH_Message {
			/** Fake constructor to avoid new instances being created by a PropertyGrid. */
			constructor();

			/** Create a new message of type GH_Message_Type.info */
			constructor(message_content: string);

			/** Create a new message. */
			constructor(
				message_content: string,
				message_type: GH_IO.Serialization.GH_Message_Type,
			);

			/** Gets the text content of this message. */
			readonly Message: string;

			/** Gets the type of this message. */
			readonly Type: GH_IO.Serialization.GH_Message_Type;
		}
	}

	export namespace GH_IO.Serialization {
		/** Base interface for all Archive Chunks. */
		export interface GH_IChunk extends
			GH_IO.Serialization.GH_IBinarySupport,
			GH_IO.Serialization.GH_IXmlSupport {
			/**
			 * Gets a pointer to the archive that owns the Root of the tree this chunk belongs to.
			 */
			readonly Archive: GH_IO.Serialization.GH_Archive;

			/**
			 * Gets a string representing the URI with which the archive is associated.  The location
			 * may be a null string.
			 */
			readonly ArchiveLocation: string;

			/**
			 * Gets the name of this chunk. The name is set by the owner of this chunk.  Names must
			 * be at least 1 character long.  The combination of name+index is always unique among a
			 * set of chunks in a single litter.
			 */
			readonly Name: string;

			/**
			 * Gets the index of this chunk. The index is set by the owner of this chunk.  Indices
			 * smaller than zero imply no index has been set.  The combination of name+index is
			 * always unique among a set of chunks in the same litter.
			 */
			readonly Index: number;

			/** Gets the number of items contained in this chunk. */
			readonly ItemCount: number;

			/**
			 * Gets a pointer to the internal list of items.  Do not access this list unless you know
			 * what you are doing.
			 */
			readonly Items: unknown;

			/**
			 * Gets the number of child chunks contained in this chunk.  The set of all child chunks
			 * is referred to as a 'litter'.
			 */
			readonly ChunkCount: number;

			/**
			 * Gets a pointer to the internal list of child chunks.  Do not access this list unless
			 * you know what you are doing.
			 */
			readonly Chunks: unknown;

			/**
			 * Log a new message with the top-level archive.  Messages are collected during
			 * read/write operations,  and can be displayed to the user upon completion using
			 * GH_Archive.ShowMessageLog().
			 */
			AddMessage(
				m: string,
				t: GH_IO.Serialization.GH_Message_Type,
			): void;
		}
	}

	export namespace GH_IO.Serialization {
		/** Provides access to a subset of GH_Chunk methods used for writing archives. */
		export interface GH_IWriter extends
			GH_IO.Serialization.GH_IChunk,
			GH_IO.Serialization.GH_IBinarySupport,
			GH_IO.Serialization.GH_IXmlSupport {
			/**
			 * Adds a text comment to this chunk. Comments are serialized only if the output flavour
			 * is a  human readable format. Comments are never deserialized, they are purely for the
			 * benefit of the humans reading the file data.
			 */
			AddComment(comment_text: string): void;

			/**
			 * Create a new child chunk with the specified name but without an index qualifier.  If
			 * another chunk already exists with similar properties, an exception will be thrown.
			 */
			CreateChunk(chunk_name: string): GH_IO.Serialization.GH_IWriter;

			/**
			 * Create a new child chunk with the specified name and index qualifier.  If another
			 * chunk already exists with similar properties, an exception will be thrown.
			 */
			CreateChunk(
				chunk_name: string,
				chunk_index: number,
			): GH_IO.Serialization.GH_IWriter;

			/**
			 * Remove the first chunk with a matching name.  Only chunks without index qualifiers are
			 * considered.  Name comparisons are not case-sensitive.
			 */
			RemoveChunk(chunk_name: string): boolean;

			/**
			 * Remove the first chunk with a matching name and index.  Only chunks with index
			 * qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			RemoveChunk(
				chunk_name: string,
				chunk_index: number,
			): boolean;

			/** Remove the specified chunk from the litter. */
			RemoveChunk(chunk: GH_IO.Serialization.GH_IChunk): boolean;

			/** Remove an unindexed item from this chunk. */
			RemoveItem(itemName: string): boolean;

			/** Remove an indexed item from this chunk. */
			RemoveItem(
				itemName: string,
				itemIndex: number,
			): boolean;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetBoolean(
				item_name: string,
				item_value: boolean,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetBoolean(
				item_name: string,
				item_index: number,
				item_value: boolean,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetByte(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetByte(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetInt32(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetInt32(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetInt64(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetInt64(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetSingle(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetSingle(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDouble(
				item_name: string,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDouble(
				item_name: string,
				item_index: number,
				item_value: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDecimal(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDecimal(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDate(
				item_name: string,
				item_value: DateTime,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDate(
				item_name: string,
				item_index: number,
				item_value: DateTime,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetGuid(
				item_name: string,
				item_value: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetGuid(
				item_name: string,
				item_index: number,
				item_value: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetString(
				item_name: string,
				item_value: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetString(
				item_name: string,
				item_index: number,
				item_value: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPath(
				item_name: string,
				absolutePath: string,
				basePath: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPath(
				item_name: string,
				item_index: number,
				absolutePath: string,
				basePath: string,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingPoint(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingPoint(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingPointF(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingPointF(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingSize(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingSize(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingSizeF(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingSizeF(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingRectangle(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingRectangle(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingRectangleF(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingRectangleF(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingColor(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDrawingColor(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingBitmap(
				item_name: string,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDrawingBitmap(
				item_name: string,
				item_index: number,
				item_value: unknown,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetByteArray(
				item_name: string,
				item_value: number[],
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetByteArray(
				item_name: string,
				item_index: number,
				item_value: number[],
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetDoubleArray(
				item_name: string,
				item_value: number[],
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetDoubleArray(
				item_name: string,
				item_index: number,
				item_value: number[],
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetPoint2D(
				item_name: string,
				item_value: GH_IO.Types.GH_Point2D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPoint2D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Point2D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetPoint3D(
				item_name: string,
				item_value: GH_IO.Types.GH_Point3D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPoint3D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Point3D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetPoint4D(
				item_name: string,
				item_value: GH_IO.Types.GH_Point4D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPoint4D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Point4D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetInterval1D(
				item_name: string,
				item_value: GH_IO.Types.GH_Interval1D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetInterval1D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Interval1D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetInterval2D(
				item_name: string,
				item_value: GH_IO.Types.GH_Interval2D,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetInterval2D(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Interval2D,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetLine(
				item_name: string,
				item_value: GH_IO.Types.GH_Line,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetLine(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Line,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetBoundingBox(
				item_name: string,
				item_value: GH_IO.Types.GH_BoundingBox,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetBoundingBox(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_BoundingBox,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetPlane(
				item_name: string,
				item_value: GH_IO.Types.GH_Plane,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetPlane(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Plane,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetVersion(
				item_name: string,
				item_value: GH_IO.Types.GH_Version,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetVersion(
				item_name: string,
				item_index: number,
				item_value: GH_IO.Types.GH_Version,
			): void;

			/**
			 * Add a new data item to this chunk.  The name must be unique or an exception will be
			 * thrown.
			 */
			SetVersion(
				item_name: string,
				major: number,
				minor: number,
				revision: number,
			): void;

			/**
			 * Add a new data item to this chunk.  The combination of name and index must be unique
			 * or an exception will be thrown.
			 */
			SetVersion(
				item_name: string,
				item_index: number,
				major: number,
				minor: number,
				revision: number,
			): void;
		}
	}

	export namespace GH_IO.Serialization {
		/** Provides access to a subset of GH_Chunk methods used for reading archives. */
		export interface GH_IReader extends
			GH_IO.Serialization.GH_IChunk,
			GH_IO.Serialization.GH_IBinarySupport,
			GH_IO.Serialization.GH_IXmlSupport {
			/**
			 * Finds the first chunk in the litter that matches the given name.  Only chunks without
			 * index qualifiers are considered.
			 */
			FindChunk(name: string): GH_IO.Serialization.GH_IReader;

			/**
			 * Finds the first chunk in the list that matches the given name and index.  Only chunks
			 * with index qualifiers are considered.
			 */
			FindChunk(
				name: string,
				index: number,
			): GH_IO.Serialization.GH_IReader;

			/**
			 * Checks whether a chunk with the specified name exists in the litter.  Only chunks
			 * without index qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			ChunkExists(name: string): boolean;

			/**
			 * Checks whether a chunk with the specified name and index exists in the litter.  Only
			 * chunks with index qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			ChunkExists(
				name: string,
				index: number,
			): boolean;

			/**
			 * Finds the first item that matches the given name.  Only items without index qualifiers
			 * are considered.  Name comparisons are not case-sensitive.
			 */
			FindItem(name: string): GH_IO.Types.GH_Item;

			/**
			 * Finds the first item that matches the given name and index.  Only items with index
			 * qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			FindItem(
				name: string,
				index: number,
			): GH_IO.Types.GH_Item;

			/**
			 * Checks whether an item with the specified name exists.  Only items without index
			 * qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			ItemExists(name: string): boolean;

			/**
			 * Checks whether an item with the specified name and index exists.  Only items with
			 * index qualifiers are considered.  Name comparisons are not case-sensitive.
			 */
			ItemExists(
				name: string,
				index: number,
			): boolean;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetBoolean(item_name: string): boolean;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetBoolean(
				item_name: string,
				item_index: number,
			): boolean;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetByte(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetByte(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetInt32(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetInt32(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetInt64(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetInt64(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetSingle(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetSingle(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDouble(item_name: string): number;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDouble(
				item_name: string,
				item_index: number,
			): number;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDecimal(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDecimal(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDate(item_name: string): DateTime;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDate(
				item_name: string,
				item_index: number,
			): DateTime;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetGuid(item_name: string): string;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetGuid(
				item_name: string,
				item_index: number,
			): string;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetString(item_name: string): string;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetString(
				item_name: string,
				item_index: number,
			): string;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPath(
				item_name: string,
				basePath: string,
			): string[];

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPath(
				item_name: string,
				item_index: number,
				basePath: string,
			): string[];

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingPoint(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingPoint(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingPointF(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingPointF(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingSize(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingSize(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingSizeF(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingSizeF(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingRectangle(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingRectangle(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingRectangleF(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingRectangleF(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingColor(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingColor(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingBitmap(item_name: string): unknown;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDrawingBitmap(
				item_name: string,
				item_index: number,
			): unknown;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetByteArray(item_name: string): number[];

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetByteArray(
				item_name: string,
				item_index: number,
			): number[];

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetDoubleArray(item_name: string): number[];

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetDoubleArray(
				item_name: string,
				item_index: number,
			): number[];

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint2D(item_name: string): GH_IO.Types.GH_Point2D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint2D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Point2D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint3D(item_name: string): GH_IO.Types.GH_Point3D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint3D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Point3D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint4D(item_name: string): GH_IO.Types.GH_Point4D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPoint4D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Point4D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetInterval1D(item_name: string): GH_IO.Types.GH_Interval1D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetInterval1D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Interval1D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetInterval2D(item_name: string): GH_IO.Types.GH_Interval2D;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetInterval2D(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Interval2D;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetLine(item_name: string): GH_IO.Types.GH_Line;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetLine(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Line;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetBoundingBox(item_name: string): GH_IO.Types.GH_BoundingBox;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetBoundingBox(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_BoundingBox;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetPlane(item_name: string): GH_IO.Types.GH_Plane;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetPlane(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Plane;

			/**
			 * Gets the value of the item with the specified name.  Name comparison is not
			 * case-sensitive.
			 */
			GetVersion(item_name: string): GH_IO.Types.GH_Version;

			/**
			 * Gets the value of the item with the specified name and index.  Name comparison is not
			 * case-sensitive.
			 */
			GetVersion(
				item_name: string,
				item_index: number,
			): GH_IO.Types.GH_Version;

			TryGetBoolean(
				item_name: string,
				value: boolean,
			): boolean;

			TryGetBoolean(
				item_name: string,
				item_index: number,
				value: boolean,
			): boolean;

			TryGetByte(
				item_name: string,
				value: number,
			): boolean;

			TryGetByte(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetInt32(
				item_name: string,
				value: number,
			): boolean;

			TryGetInt32(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetInt64(
				item_name: string,
				value: number,
			): boolean;

			TryGetInt64(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetSingle(
				item_name: string,
				value: number,
			): boolean;

			TryGetSingle(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetDouble(
				item_name: string,
				value: number,
			): boolean;

			TryGetDouble(
				item_name: string,
				item_index: number,
				value: number,
			): boolean;

			TryGetDecimal(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDecimal(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDate(
				item_name: string,
				value: DateTime,
			): boolean;

			TryGetDate(
				item_name: string,
				item_index: number,
				value: DateTime,
			): boolean;

			TryGetGuid(
				item_name: string,
				value: string,
			): boolean;

			TryGetGuid(
				item_name: string,
				item_index: number,
				value: string,
			): boolean;

			TryGetString(
				item_name: string,
				value: string,
			): boolean;

			TryGetString(
				item_name: string,
				item_index: number,
				value: string,
			): boolean;

			TryGetDrawingPoint(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingPoint(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingPointF(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingPointF(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingSize(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingSize(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingSizeF(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingSizeF(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingRectangle(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingRectangle(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingRectangleF(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingRectangleF(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetDrawingColor(
				item_name: string,
				value: unknown,
			): boolean;

			TryGetDrawingColor(
				item_name: string,
				item_index: number,
				value: unknown,
			): boolean;

			TryGetPoint2D(
				item_name: string,
				value: GH_IO.Types.GH_Point2D,
			): boolean;

			TryGetPoint2D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Point2D,
			): boolean;

			TryGetPoint3D(
				item_name: string,
				value: GH_IO.Types.GH_Point3D,
			): boolean;

			TryGetPoint3D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Point3D,
			): boolean;

			TryGetPoint4D(
				item_name: string,
				value: GH_IO.Types.GH_Point4D,
			): boolean;

			TryGetPoint4D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Point4D,
			): boolean;

			TryGetInterval1D(
				item_name: string,
				value: GH_IO.Types.GH_Interval1D,
			): boolean;

			TryGetInterval1D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Interval1D,
			): boolean;

			TryGetInterval2D(
				item_name: string,
				value: GH_IO.Types.GH_Interval2D,
			): boolean;

			TryGetInterval2D(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Interval2D,
			): boolean;

			TryGetLine(
				item_name: string,
				value: GH_IO.Types.GH_Line,
			): boolean;

			TryGetLine(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Line,
			): boolean;

			TryGetBoundingBox(
				item_name: string,
				value: GH_IO.Types.GH_BoundingBox,
			): boolean;

			TryGetBoundingBox(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_BoundingBox,
			): boolean;

			TryGetPlane(
				item_name: string,
				value: GH_IO.Types.GH_Plane,
			): boolean;

			TryGetPlane(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Plane,
			): boolean;

			TryGetVersion(
				item_name: string,
				value: GH_IO.Types.GH_Version,
			): boolean;

			TryGetVersion(
				item_name: string,
				item_index: number,
				value: GH_IO.Types.GH_Version,
			): boolean;
		}
	}

	export namespace GH_IO.Serialization {
		/**
		 * Interface which declares all methods required for objects that  can be (de)serialized
		 * to and from a binary archive.
		 */
		export interface GH_IBinarySupport {
			/** Called when an object is required to serialize itself. */
			Write(writer: unknown): void;

			/** Called when an object is required to deserialize itself. */
			Read(reader: unknown): void;
		}
	}

	export namespace GH_IO.Serialization {
		/**
		 * Interface which declares all methods required for objects that  can be (de)serialized
		 * to and from an Xml archive.
		 */
		export interface GH_IXmlSupport {
			/** Called when an object is required to serialize itself. */
			Write(writer: unknown): void;

			/** Called when an object is required to deserialize itself. */
			Read(node: unknown): void;
		}
	}
}
